{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/ValensSarajevo/Desktop/testApp/movies/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ValensSarajevo/Desktop/testApp/movies/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ValensSarajevo\\\\Desktop\\\\testApp\\\\movies\\\\components\\\\MovieList.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport MediaCard from \"./Card\";\nimport api from \"../services/api\";\n\nvar MoviesList = function MoviesList(_ref) {\n  _s();\n\n  var popularMovies = _ref.popularMovies;\n\n  var _useState = useState(false),\n      dataLoaded = _useState[0],\n      setDataLoaded = _useState[1];\n\n  var _useState2 = useState(popularMovies),\n      movies = _useState2[0],\n      setMovies = _useState2[1];\n\n  var getMoviesByGenre = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(genres) {\n      var year,\n          genresLookup,\n          genreIds,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              year = _args.length > 1 && _args[1] !== undefined ? _args[1] : '';\n              _context.next = 3;\n              return api.getAllGenres();\n\n            case 3:\n              genresLookup = _context.sent;\n              genreIds = genresLookup.filter(function (x) {\n                return genres.includes(x.name);\n              }).map(function (x) {\n                return x.id;\n              });\n              _context.next = 7;\n              return api.getFilteredMovies(genreIds.join(\",\"), year);\n\n            case 7:\n              data = _context.sent;\n              setMovies(data);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getMoviesByGenre(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var urlParams = new URLSearchParams(window.location.search);\n    var genresString = urlParams.get(\"genre\");\n    var year = urlParams.get(\"year\");\n\n    if (genresString) {\n      getMoviesByGenre(genresString.split(\",\"), year);\n    } else {\n      setDataLoaded(true);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"media-container\",\n    children: movies.map(function (movie, index) {\n      return /*#__PURE__*/_jsxDEV(MediaCard, {\n        movie: movie\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MoviesList, \"wASzOkZBM0YsO4p1D4HUzzKXnec=\");\n\n_c = MoviesList;\nexport default MoviesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"sources":["C:/Users/ValensSarajevo/Desktop/testApp/movies/components/MovieList.tsx"],"names":["React","useEffect","useState","MediaCard","api","MoviesList","popularMovies","dataLoaded","setDataLoaded","movies","setMovies","getMoviesByGenre","genres","year","getAllGenres","genresLookup","genreIds","filter","x","includes","name","map","id","getFilteredMovies","join","data","urlParams","URLSearchParams","window","location","search","genresString","get","split","movie","index"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgDC,SAAhD,EAA2DC,QAA3D,QAA2E,OAA3E;AACA,OAAOC,SAAP,MAAsB,QAAtB;AAGA,OAAOC,GAAP,MAAgB,iBAAhB;;AAMA,IAAMC,UAA8C,GAAG,SAAjDA,UAAiD,OAAuB;AAAA;;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAAA,kBACxCJ,QAAQ,CAAC,KAAD,CADgC;AAAA,MACrEK,UADqE;AAAA,MACzDC,aADyD;;AAAA,mBAEhDN,QAAQ,CAAoBI,aAApB,CAFwC;AAAA,MAErEG,MAFqE;AAAA,MAE7DC,SAF6D;;AAI5E,MAAMC,gBAAgB;AAAA,yEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBC,cAAAA,IAAzB,2DAAwC,EAAxC;AAAA;AAAA,qBACIT,GAAG,CAACU,YAAJ,EADJ;;AAAA;AACjBC,cAAAA,YADiB;AAEjBC,cAAAA,QAFiB,GAEND,YAAY,CAACE,MAAb,CAAoB,UAACC,CAAD;AAAA,uBAAON,MAAM,CAACO,QAAP,CAAgBD,CAAC,CAACE,IAAlB,CAAP;AAAA,eAApB,EAAoDC,GAApD,CAAwD,UAACH,CAAD;AAAA,uBAAOA,CAAC,CAACI,EAAT;AAAA,eAAxD,CAFM;AAAA;AAAA,qBAGJlB,GAAG,CAACmB,iBAAJ,CAAsBP,QAAQ,CAACQ,IAAT,CAAc,GAAd,CAAtB,EAA0CX,IAA1C,CAHI;;AAAA;AAGjBY,cAAAA,IAHiB;AAIvBf,cAAAA,SAAS,CAACe,IAAD,CAAT;;AAJuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBd,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAOAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMyB,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB;AACA,QAAMC,YAAY,GAAGL,SAAS,CAACM,GAAV,CAAc,OAAd,CAArB;AACA,QAAMnB,IAAI,GAAGa,SAAS,CAACM,GAAV,CAAc,MAAd,CAAb;;AACA,QAAID,YAAJ,EAAkB;AAChBpB,MAAAA,gBAAgB,CAACoB,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAD,EAA0BpB,IAA1B,CAAhB;AACD,KAFD,MAEO;AACLL,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GATQ,EASN,EATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA,cACGC,MAAM,CAACY,GAAP,CAAW,UAACa,KAAD,EAAQC,KAAR,EAAkB;AAC5B,0BAAO,QAAC,SAAD;AAAW,QAAA,KAAK,EAAED;AAAlB,SAA8BC,KAA9B;AAAA;AAAA;AAAA;AAAA,eAAP;AACD,KAFA;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CA7BD;;GAAM9B,U;;KAAAA,U;AA+BN,eAAeA,UAAf","sourcesContent":["import React, { FunctionComponent, useCallback, useEffect, useState } from \"react\";\r\nimport MediaCard from \"./Card\";\r\nimport MoviesInterface from \"../interfaces/IMovie\";\r\nimport axios from \"axios\";\r\nimport api from \"../services/api\";\r\n\r\ntype MoviesListProps = {\r\n  popularMovies: MoviesInterface[];\r\n};\r\n\r\nconst MoviesList: FunctionComponent<MoviesListProps> = ({ popularMovies }) => {\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [movies, setMovies] = useState<MoviesInterface[]>(popularMovies);\r\n\r\n  const getMoviesByGenre = async (genres: string[], year: string = '') => {\r\n    const genresLookup = await api.getAllGenres();\r\n    const genreIds = genresLookup.filter((x) => genres.includes(x.name)).map((x) => x.id);\r\n    const data = await api.getFilteredMovies(genreIds.join(\",\"), year);\r\n    setMovies(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const genresString = urlParams.get(\"genre\");\r\n    const year = urlParams.get(\"year\")\r\n    if (genresString) {\r\n      getMoviesByGenre(genresString.split(\",\"), year);\r\n    } else {\r\n      setDataLoaded(true);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={\"media-container\"}>\r\n      {movies.map((movie, index) => {\r\n        return <MediaCard movie={movie} key={index} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n"]},"metadata":{},"sourceType":"module"}