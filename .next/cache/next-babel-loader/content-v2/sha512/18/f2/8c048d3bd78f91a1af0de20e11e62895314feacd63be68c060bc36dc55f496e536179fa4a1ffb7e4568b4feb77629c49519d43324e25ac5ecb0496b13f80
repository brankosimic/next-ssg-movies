{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/ValensSarajevo/Desktop/testApp/movies/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ValensSarajevo/Desktop/testApp/movies/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ValensSarajevo\\\\Desktop\\\\testApp\\\\movies\\\\components\\\\MovieList.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport MediaCard from \"./Card\";\nimport api from \"../services/api\";\n\nvar MoviesList = function MoviesList(_ref) {\n  _s();\n\n  var popularMovies = _ref.popularMovies;\n\n  var _useState = useState(),\n      movies = _useState[0],\n      setMovies = _useState[1];\n\n  var getMoviesByGenre = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(genres) {\n      var year,\n          genresLookup,\n          genreIds,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              year = _args.length > 1 && _args[1] !== undefined ? _args[1] : '';\n              _context.next = 3;\n              return api.getAllGenres();\n\n            case 3:\n              genresLookup = _context.sent;\n              genreIds = genresLookup.filter(function (x) {\n                return genres.includes(x.name);\n              }).map(function (x) {\n                return x.id;\n              });\n              console.log('STA RADIS ', year);\n              _context.next = 8;\n              return api.getFilteredMovies(genreIds.join(\",\"), year);\n\n            case 8:\n              data = _context.sent;\n              setMovies(data);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getMoviesByGenre(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    var urlParams = new URLSearchParams(window.location.search);\n    var genresString = urlParams.get(\"genre\");\n    var year = urlParams.get(\"year\");\n    console.log('STA RADIS ', year);\n\n    if (genresString) {\n      getMoviesByGenre(genresString.split(\",\"), year);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"media-container\",\n    children: (movies || popularMovies).map(function (movie, index) {\n      return /*#__PURE__*/_jsxDEV(MediaCard, {\n        movie: movie\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 16\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MoviesList, \"DsXWz4eQ6qRZ9Cx7rzTltn/5uKY=\");\n\n_c = MoviesList;\nexport default MoviesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"sources":["C:/Users/ValensSarajevo/Desktop/testApp/movies/components/MovieList.tsx"],"names":["React","useEffect","useState","MediaCard","api","MoviesList","popularMovies","movies","setMovies","getMoviesByGenre","genres","year","getAllGenres","genresLookup","genreIds","filter","x","includes","name","map","id","console","log","getFilteredMovies","join","data","urlParams","URLSearchParams","window","location","search","genresString","get","split","movie","index"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgDC,SAAhD,EAA2DC,QAA3D,QAA2E,OAA3E;AACA,OAAOC,SAAP,MAAsB,QAAtB;AAGA,OAAOC,GAAP,MAAgB,iBAAhB;;AAMA,IAAMC,UAA8C,GAAG,SAAjDA,UAAiD,OAAuB;AAAA;;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAAA,kBAChDJ,QAAQ,EADwC;AAAA,MACrEK,MADqE;AAAA,MAC7DC,SAD6D;;AAG5E,MAAMC,gBAAgB;AAAA,yEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBC,cAAAA,IAAzB,2DAAwC,EAAxC;AAAA;AAAA,qBACIP,GAAG,CAACQ,YAAJ,EADJ;;AAAA;AACjBC,cAAAA,YADiB;AAEjBC,cAAAA,QAFiB,GAEND,YAAY,CAACE,MAAb,CAAoB,UAACC,CAAD;AAAA,uBAAON,MAAM,CAACO,QAAP,CAAgBD,CAAC,CAACE,IAAlB,CAAP;AAAA,eAApB,EAAoDC,GAApD,CAAwD,UAACH,CAAD;AAAA,uBAAOA,CAAC,CAACI,EAAT;AAAA,eAAxD,CAFM;AAGvBC,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBX,IAAzB;AAHuB;AAAA,qBAIJP,GAAG,CAACmB,iBAAJ,CAAsBT,QAAQ,CAACU,IAAT,CAAc,GAAd,CAAtB,EAA0Cb,IAA1C,CAJI;;AAAA;AAIjBc,cAAAA,IAJiB;AAKvBjB,cAAAA,SAAS,CAACiB,IAAD,CAAT;;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBhB,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAQAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMyB,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB;AACA,QAAMC,YAAY,GAAGL,SAAS,CAACM,GAAV,CAAc,OAAd,CAArB;AACA,QAAMrB,IAAI,GAAGe,SAAS,CAACM,GAAV,CAAc,MAAd,CAAb;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBX,IAAzB;;AACA,QAAIoB,YAAJ,EAAkB;AAChBtB,MAAAA,gBAAgB,CAACsB,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAD,EAA0BtB,IAA1B,CAAhB;AACD;AACF,GARQ,EAQN,EARM,CAAT;AAUA,sBACE;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA,cACG,CAACJ,MAAM,IAAID,aAAX,EAA0Ba,GAA1B,CAA8B,UAACe,KAAD,EAAQC,KAAR,EAAkB;AAC/C,0BAAO,QAAC,SAAD;AAAW,QAAA,KAAK,EAAED;AAAlB,SAA8BC,KAA9B;AAAA;AAAA;AAAA;AAAA,eAAP;AACD,KAFA;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CA5BD;;GAAM9B,U;;KAAAA,U;AA8BN,eAAeA,UAAf","sourcesContent":["import React, { FunctionComponent, useCallback, useEffect, useState } from \"react\";\r\nimport MediaCard from \"./Card\";\r\nimport MoviesInterface from \"../interfaces/IMovie\";\r\nimport axios from \"axios\";\r\nimport api from \"../services/api\";\r\n\r\ntype MoviesListProps = {\r\n  popularMovies: MoviesInterface[];\r\n};\r\n\r\nconst MoviesList: FunctionComponent<MoviesListProps> = ({ popularMovies }) => {\r\n  const [movies, setMovies] = useState<MoviesInterface[]>();\r\n\r\n  const getMoviesByGenre = async (genres: string[], year: string = '') => {\r\n    const genresLookup = await api.getAllGenres();\r\n    const genreIds = genresLookup.filter((x) => genres.includes(x.name)).map((x) => x.id);\r\n    console.log('STA RADIS ',year )\r\n    const data = await api.getFilteredMovies(genreIds.join(\",\"), year);\r\n    setMovies(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const genresString = urlParams.get(\"genre\");\r\n    const year = urlParams.get(\"year\")\r\n    console.log('STA RADIS ',year )\r\n    if (genresString) {\r\n      getMoviesByGenre(genresString.split(\",\"), year);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className={\"media-container\"}>\r\n      {(movies || popularMovies).map((movie, index) => {\r\n        return <MediaCard movie={movie} key={index} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n"]},"metadata":{},"sourceType":"module"}